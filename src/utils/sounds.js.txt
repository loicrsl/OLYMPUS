import React, { useEffect, useRef, useState } from 'react';
import { playClickSound } from '../utils/sounds';

const AudioControls = () => {
  const audioRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [volume, setVolume] = useState(0.5);
  const [showSlider, setShowSlider] = useState(false);
  const [faded, setFaded] = useState(false);

  useEffect(() => {
    const audio = audioRef.current;
    if (audio) {
      audio.volume = volume;
    }
  }, [volume]);

  useEffect(() => {
    const timer = setTimeout(() => {
      setFaded(true);
    }, 20000); // 20 seconds
    return () => clearTimeout(timer);
  }, []);

  const togglePlay = () => {
    const audio = audioRef.current;
    if (!audio) return;

    playClickSound();

    if (audio.paused) {
      audio.play().then(() => setIsPlaying(true)).catch(() => {});
    } else {
      audio.pause();
      setIsPlaying(false);
    }
  };

  const handleVolumeChange = (e) => {
    const newVolume = parseFloat(e.target.value);
    setVolume(newVolume);
    if (audioRef.current) {
      audioRef.current.volume = newVolume;
    }
    playClickSound();
  };

  return (
    <div
      onMouseEnter={() => setFaded(false)}
      onMouseLeave={() => setTimeout(() => setFaded(true), 20000)}
      style={{
        position: 'fixed',
        bottom: '30px',
        left: '50%',
        transform: 'translateX(-50%)',
        zIndex: 10000,
        display: 'flex',
        alignItems: 'center',
        background: 'rgba(255, 255, 255, 0.7)',
        borderRadius: '40px',
        padding: '0.4rem 1rem',
        boxShadow: '0 4px 10px rgba(0, 0, 0, 0.05)',
        backdropFilter: 'blur(6px)',
        transition: 'opacity 0.8s ease-in-out',
        gap: '1.2rem',
        opacity: faded ? 0.2 : 1
      }}
    >
      <button
        onClick={togglePlay}
        style={{
          background: 'none',
          border: 'none',
          fontSize: '1rem',
          color: '#4f4f58',
          cursor: 'pointer',
          fontWeight: 500,
        }}
      >
        {isPlaying ? '⏸' : '▶️'}
      </button>

      <div style={{ position: 'relative' }}>
        <div
          onClick={() => {
            playClickSound();
            setShowSlider((prev) => !prev);
          }}
          style={{
            width: '10px',
            height: '10px',
            background: '#4f4f58',
            borderRadius: '50%',
            cursor: 'pointer',
          }}
        ></div>
        {showSlider && (
          <input
            type="range"
            min="0"
            max="1"
            step="0.01"
            value={volume}
            onChange={handleVolumeChange}
            style={{
              writingMode: 'bt-lr',
              WebkitAppearance: 'slider-vertical',
              position: 'absolute',
              bottom: '20px',
              left: '-4px',
              height: '80px',
              width: '6px',
              background: '#4f4f58',
              borderRadius: '3px',
              border: 'none',
              outline: 'none',
              accentColor: 'transparent'
            }}
          />
        )}
      </div>

      <audio ref={audioRef} loop src="/assets/audio/ambience-loop.mp3" />
    </div>
  );
};

export default AudioControls;
